#!/usr/bin/env python

import sys
import termios
import tty
import rospy
import actionlib
from geometry_msgs.msg import PoseStamped
from moveit_commander import MoveGroupCommander, roscpp_initialize, roscpp_shutdown
from franka_gripper.msg import MoveAction, MoveGoal, GraspAction, GraspGoal, GraspEpsilon
import logging
logging.basicConfig(level=logging.INFO)


def wait_for_char():
    """Wait for a single key press and return the character."""
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(fd)
        ch = sys.stdin.read(1)
    except KeyboardInterrupt:
        return "q"
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    print(ch)
    return ch

def go_home(arm_group):

    # going to the home state

    home_joints = [
        -1.4642156372133055, -0.5381639131847715, 
        2.688624808930513, -2.2429689467696368, 
        0.5268982604079776, 2.680131860044259, 
        1.5856962567979076
    ]
    arm_group.set_joint_value_target(home_joints)

    """
        The following code was created to fix the robot arm position.
        We gave a position relative to "table_top" frame which was base of everything.
        After that in RVizz we got the orientation and position coordinates.    
        Which then we wrote in the following code. After that we echoed the logs to see
        were the robot actually was and first 7 numbers were copied in the code above.
        Reason for this was to robot to start always from the same position.#
        if we always started with the robot relative to the table_top then the robot 
        upper joint might have been lower than we want resulting in us not able to move 
        back properly. Therefore, we saved one position from the relatively good 
        position and saved it.
    """

    # home_pose = PoseStamped()
    # home_pose.header.frame_id = "table_top"
    # home_pose.pose.orientation.x = -1
    # home_pose.pose.position.x = 0.05
    # home_pose.pose.position.y = 0.10
    # home_pose.pose.position.z = 0.07
    # arm_group.set_joint_value_target(home_pose)

    rospy.loginfo("Moving to home pose...")
    while not arm_group.go(wait=True):
        rospy.logwarn("Retrying move to home...")
        rospy.sleep(3.0)
        if rospy.is_shutdown():
            roscpp_shutdown()
            return
        
def grip_open(move_client):
    
    """ gripper opens for 3 cm width """
    rospy.loginfo("Opening gripper (3 cm)...")
    goal = MoveGoal(width=0.03, speed=0.05)
    move_client.send_goal(goal)
    move_client.wait_for_result(rospy.Duration(5.0))
    rospy.loginfo("Gripper opened.")

def grip_close(move_client, grasp_client):
    
    """ gripper closes for 3 cm width """
    rospy.loginfo("Closing gripper...")
    goal = GraspGoal()
    goal.width = 0.0                     # fully closed
    goal.speed = 0.05                    # m/s
    goal.force = 5.0                     # N
    goal.epsilon = GraspEpsilon(inner=0.3, outer=0.3)
    #if the grasp is unsuccessful 
    #logerror and continue
    grasp_client.send_goal(goal)
    grasp_client.wait_for_result(rospy.Duration(5.0))
    rospy.loginfo("Gripper closed.")


def move_right(pose, arm_group):

    """ move right """
    pose.pose.position.x = 0
    pose.pose.position.y = 0.03
    pose.pose.position.z = 0

    arm_group.set_joint_value_target(pose)
    arm_group.go(wait=True)

    rospy.loginfo("Move right")


def move_left(pose, arm_group):

    """ move left """
    pose.pooginfo("Move back")

def move_down(pose, arm_group):

    """ move down """
    pose.pose.position.x = 0
    pose.pose.position.y = 0
    pose.pose.position.z = 0.02

    arm_group.set_joint_value_target(pose)
    arm_group.go(wait=True)
    pose.position.x = 0
    pose.pose.position.y = -0.03
    pose.pose.position.z = 0

    arm_group.set_joint_value_target(pose)
    arm_group.go(wait=True)

    rospy.loginfo("Move left")

def move_forward(pose, arm_group):

    """ move forward """
    pose.pose.position.x = -0.03
    pose.pose.position.y = 0
    pose.pose.position.z = 0

    arm_group.set_joint_value_target(pose)
    arm_group.go(wait=True)

    rospy.loginfo("Move forward")


def move_back(pose, arm_group):

    """ move back """
    pose.pose.position.x = 0.03
    pose.pose.position.y = 0
    pose.pose.position.z = 0

    arm_group.set_joint_value_target(pose)
    arm_group.go(wait=True)

    rospy.loginfo("Move back")

def move_down(pose, arm_group):

    """ move down """
    pose.pose.position.x = 0
    pose.pose.position.y = 0
    pose.pose.position.z = 0.02

    arm_group.set_joint_value_target(pose)
    arm_group.go(wait=True)

    rospy.loginfo("Move back")

def main():
    roscpp_initialize(sys.argv)
    rospy.init_node("teleop_grid", anonymous=True)

    # --- Arm MoveIt Commander ---
    arm_group = MoveGroupCommander("arm")
    arm_group.set_max_velocity_scaling_factor(0.3)
    arm_group.set_max_acceleration_scaling_factor(0.3)

    rospy.loginfo("Connecting to Franka gripper action servers...")
    move_client = actionlib.SimpleActionClient("/franka_gripper/move", MoveAction)
    grasp_client = actionlib.SimpleActionClient("/franka_gripper/grasp", GraspAction)

    rospy.loginfo("Waiting for gripper servers...")
    move_client.wait_for_server()
    grasp_client.wait_for_server()
    rospy.loginfo("Connected to gripper action servers.")

    go_home(arm_group)

    grip_open(move_client)

    # --- Initialize pose for relative teleop ---
    pose = PoseStamped()
    pose.header.frame_id = "panda_hand_tcp"
    pose.pose.position.x = 0
    pose.pose.position.y = -0.05
    pose.pose.orientation.w = 1.0

    rospy.loginfo(
        "\nTeleop ready:\n"
        "  W/A/S/D  = move arm\n"
        "  G        = open gripper (3 cm)\n"
        "  C        = close gripper\n"
        "  Q        = quit\n"
    )

    while not rospy.is_shutdown():
        ch = wait_for_char()

        if ch == "q":
            rospy.loginfo("Exiting teleop...")
            break

        # ---- Arm control ----
        elif ch == "a": # go right 
            move_right(pose, arm_group)

        elif ch == "w": # go forward
            move_forward(pose, arm_group)

        elif ch == "s": # go back
            move_back(pose, arm_group)

        elif ch == "d": # go left
            move_left(pose, arm_group)

        elif ch == "c":

            move_down(pose, arm_group)

            #closes the gripper to grab the object        
            rospy.loginfo("Closing gripper...")
            goal = GraspGoal()
            goal.width = 0.0                     # fully closed
            goal.speed = 0.05                    # m/s
            goal.force = 5.0                     # N
            goal.epsilon = GraspEpsilon(inner=0.3, outer=0.3)
            #if the grasp is unsuccessful 
            #logerror and continue
            grasp_client.send_goal(goal)
            grasp_client.wait_for_result(rospy.Duration(5.0))
            rospy.loginfo("Gripper closed.")

            # move up by 6 cm 
            pose.pose.position.x = 0
            pose.pose.position.y = 0
            pose.pose.position.z = - 0.25

            arm_group.set_joint_value_target(pose)
            arm_group.go(wait=True)


            # move to the discard pile pose
            discard_joints = [
                -0.87768080665145, -0.7483236951482923, 
                0.8972143784873035, -2.781962041787934, 
                0.7186038433660632, 2.141733352608151, 
                0.18308159769657587
            ] # needs to be changed
            arm_group.set_joint_value_target(discard_joints)
            rospy.loginfo("Moving to discard pose...")
            while not arm_group.go(wait=True):
                rospy.logwarn("Retrying move to discard...")
                rospy.sleep(3.0)
                if rospy.is_shutdown():
                    roscpp_shutdown()
                    return

            # gripper opens and drops the object
            rospy.loginfo("Opening gripper (3 cm)...")
            goal = MoveGoal(width=0.03, speed=0.05)
            move_client.send_goal(goal)
            move_client.wait_for_result(rospy.Duration(5.0))
            rospy.loginfo("Gripper opened.")

            # move to home pose
            arm_group.set_joint_value_target(home_joints)
            rospy.loginfo("Moving to home pose...")
            while not arm_group.go(wait=True):
                rospy.logwarn("Retrying move to home...")
                rospy.sleep(3.0)
                if rospy.is_shutdown():
                    roscpp_shutdown()
                    return
            continue
        else:
            continue

        arm_group.set_joint_value_target(pose)
        arm_group.go(wait=True)

    roscpp_shutdown()


if __name__ == "__main__":
    main()



# # ---- Gripper open ----
# elif ch == "g":
#     rospy.loginfo("Opening gripper (3 cm)...")
#     goal = MoveGoal(width=0.03, speed=0.05)
#     move_client.send_goal(goal)
#     move_client.wait_for_result(rospy.Duration(5.0))
#     rospy.loginfo("Gripper opened.")
#     continue

# ---- Gripper close (grasp) ----